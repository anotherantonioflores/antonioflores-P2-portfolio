[
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "ARIANA ALVERADO contributed to this exercise.\nThe structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nAdded two new variables:\n1) Age - numeric variable\n2) Hair_Color - categorical variable"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\ncharacter.min\ncharacter.max\ncharacter.empty\ncharacter.n_unique\ncharacter.whitespace\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\ncharacter\nHair_Color\n0\n1\n4\n6\n0\n4\n0\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nGender\n0\n1\nNA\nNA\nNA\nNA\nNA\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nAge\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n49.22222\n25.97969\n15\n24\n55\n70\n89\n▇▁▇▅▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender.\n\n\n\n\n\nFigure 2 shows a boxplot figure measuring height, grouped by hair color.\n\n\n\n\n\n\n\n\nFigure 2: Height and hair color displayed on boxplot.\n\n\n\n\n\nFigure 3 shows a scatterplot measuring Age by Weight.\n\n\n\n\n\n\n\n\nFigure 3: Age and weight displayed on a scatterplot."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871\n\n\n\n\n\n\n\n\nTable 3 shows another summary of a linear model fit. This model uses height as the outcome and age and hair color as the predictors.\n\n\n\n\nTable 3: Linear model fit table 2.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n136.6113074\n40.6766470\n3.3584702\n0.0283450\n\n\nAge\n0.5331763\n0.5061893\n1.0533141\n0.3516175\n\n\nHair_Colorblonde\n24.1919906\n33.9986276\n0.7115579\n0.5160360\n\n\nHair_Colorbrown\n-0.5212996\n25.1170129\n-0.0207548\n0.9844353\n\n\nHair_Colorgray\n-10.4988221\n22.4470831\n-0.4677143\n0.6643339"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at C:/Users/Client/Documents/antonioflores-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/Client/Documents/antonioflores-P2-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Placeholder file for the future data/results presentation exercise."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "We will be using data from the Gapminder package in R\n\n#Please install all packages not already installed using\n#a command similar to one below\n#install.packages(\"dslabs\")\n\nlibrary(dslabs) #How we will access the dataset\nlibrary(tidyr) #For cleaning and analyzing the data\nlibrary(dplyr) #For creating pipes to sort, filter data\nlibrary(ggplot2) # For creating nice visuals\nlibrary(scales) # For scaling data \n\nTaking a look at the structure of the data\n\n# This will give us dimensions and column details\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n\nAssessing the quartiles for each column\n\n#This will give us an idea of how each column's data is spread out, and give us some insight about outliers\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\nVerifying the type of object that we will be accesssing\n\nclass(gapminder)\n\n[1] \"data.frame\"\n\n# Tells us that R is viewing this as a data frame which will help us with maintaining column types and cleaning the dataset"
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "Education\n\nGraduated from Texas Lutheran University in 2022 with a B.S. in Information Systems and a minor in Business\nStarted UTSA MSDA in Fall 2023\n\n\n\nCareer\n\nHired as an IT intern for WellMed Medical Management in 2021\nPromoted to Senior IT project Coordinator in 2022 upon graduation from undergraduate program.\n\n\n\nTechnical Experience\n\nSome familiarity\n\nR, Rstudio, Quarto\nSAS\nGretl\n\n\n\nMore Experienced\n\nExcel\nPython\nTableau\n\n\n\n\nRandom facts about me\n\nBroke a Guinness World Record (Longest Selfie Chain, May 2015. I was the person who actually broke the old record), but it was broken again before the next book came out. \nI was voted the TLU 2022 Student of the Year by the student body, staff, & faculty and delivered the commencement address.\n\n\n\nResearch Interest:\nNHTSA Drunk Driving Statistics\nThis is a public health issue that has been on my mind most of my life, especially since it’s such a large issue in San Antonio. I’m interested in researching more effective solutions for targeting this societal harm."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "Hello there!\nWelcome to my website and data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Antonio Flores - Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at C:/Users/Client/Documents/antonioflores-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                         `Allowed Values`\n  &lt;chr&gt;           &lt;chr&gt;                                         &lt;chr&gt;           \n1 Height          height in centimeters                         numeric value &gt;…\n2 Weight          weight in kilograms                           numeric value &gt;…\n3 Gender          identified gender (male/female/other)         M/F/O/NA        \n4 Age             Age in years                                  numeric value &gt;…\n5 Hair_Color      indentified hair colors (black/blonde/brown/… black/blonde/br…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height     &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"15…\n$ Weight     &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender     &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\"…\n$ Age        &lt;dbl&gt; 55, 72, 30, 24, 41, 89, 15, 18, 21, 29, 39, 45, 55, 70\n$ Hair_Color &lt;chr&gt; \"brown\", \"black\", \"brown\", \"blonde\", \"red\", \"gray\", \"brown\"…\n\nsummary(rawdata)\n\n    Height              Weight          Gender               Age       \n Length:14          Min.   :  45.0   Length:14          Min.   :15.00  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.:25.25  \n Mode  :character   Median :  70.0   Mode  :character   Median :40.00  \n                    Mean   : 602.7                      Mean   :43.07  \n                    3rd Qu.:  90.0                      3rd Qu.:55.00  \n                    Max.   :7000.0                      Max.   :89.00  \n                    NA's   :1                                          \n  Hair_Color       \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender   Age Hair_Color\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     \n1 180        80 M         55 brown     \n2 175        70 O         72 black     \n3 sixty      60 F         30 brown     \n4 178        76 F         24 blonde    \n5 192        90 NA        41 red       \n6 6          55 F         89 gray      \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHair_Color\n0\n1\n3\n6\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55.00\n70\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n43.07\n22.56\n15\n25.25\n40\n55\n89\n▇▅▅▃▂\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHair_Color\n0\n1\n3\n6\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n44.08\n23.15\n15\n24.00\n41\n55\n89\n▇▃▅▃▂\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHair_Color\n0\n1\n3\n6\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n44.08\n23.15\n15\n24.00\n41\n55\n89\n▇▃▅▃▂\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHair_Color\n0\n1\n3\n6\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n45.91\n24.78\n15\n22.5\n45\n62.5\n89\n▇▂▆▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHair_Color\n0\n1\n3\n6\n0\n5\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n45.91\n24.78\n15\n22.5\n45\n62.5\n89\n▇▂▆▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHair_Color\n0\n1\n4\n6\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nAge\n0\n1\n49.22\n25.98\n15\n24\n55\n70\n89\n▇▁▇▅▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/Client/Documents/antonioflores-P2-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                1     \n  factor                   1     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Hair_Color            0             1   4   6     0        4          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n3 Age                   0             1  49.2 26.0  15  24  55  70   89 ▇▁▇▅▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\nBoxplot - Hair_Color x Height\n\np5 &lt;- ggplot(mydata, aes(x=Hair_Color, y=Height)) + \n  geom_boxplot()\np5\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-hair-boxplot.png\")\nggsave(filename = figure_file, plot=p5) \n\nSaving 7 x 5 in image\n\n\nScatterplot - Weight x Age\n\np6 = ggplot(mydata, aes(x = Weight, y = Age)) +      geom_point()\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"age-weight-scatterplot.png\")\nggsave(filename = figure_file, plot=p6) \n\nSaving 7 x 5 in image\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#analyzing-life-expectancy-in-africa",
    "href": "coding-exercise/coding-exercise.html#analyzing-life-expectancy-in-africa",
    "title": "R Coding Exercise",
    "section": "",
    "text": "We will be using data from the Gapminder package in R\n\n#Please install all packages not already installed using\n#a command similar to one below\n#install.packages(\"dslabs\")\n\nlibrary(dslabs) #How we will access the dataset\nlibrary(tidyr) #For cleaning and analyzing the data\nlibrary(dplyr) #For creating pipes to sort, filter data\nlibrary(ggplot2) # For creating nice visuals\nlibrary(scales) # For scaling data \n\nTaking a look at the structure of the data\n\n# This will give us dimensions and column details\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n\nAssessing the quartiles for each column\n\n#This will give us an idea of how each column's data is spread out, and give us some insight about outliers\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\nVerifying the type of object that we will be accesssing\n\nclass(gapminder)\n\n[1] \"data.frame\"\n\n# Tells us that R is viewing this as a data frame which will help us with maintaining column types and cleaning the dataset"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#processing-data",
    "href": "coding-exercise/coding-exercise.html#processing-data",
    "title": "R Coding Exercise",
    "section": "Processing data",
    "text": "Processing data\nFirst we will segment only data from African countries into a new data frame.\n\n# Using pipes from dplyr\nafricadata = gapminder |&gt;\n  filter(continent == 'Africa') # Using two == signifies comparison operator vs assignment operator\n\nNext we will create two new objects from this Africa data set, one with both Life Expectancy and Infant Mortality, and one with both Life Expectancy and Population.\n\nafrica_IM_LE = africadata[3:4] #Slicing only two columns of interest\nafrica_POP_LE = africadata[4:6] #Slicing three columns since we want both 4 and 6\nafrica_POP_LE = africa_POP_LE[-2] #Removing middle unneeded columns\n\nLets take a look at the structure and summary of the two new data objects.\n\nstr(africa_POP_LE)\n\n'data.frame':   2907 obs. of  2 variables:\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n\nstr(africa_IM_LE)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(africa_POP_LE)\n\n life_expectancy   population       \n Min.   :13.20   Min.   :    41538  \n 1st Qu.:48.23   1st Qu.:  1605232  \n Median :53.98   Median :  5570982  \n Mean   :54.38   Mean   : 12235961  \n 3rd Qu.:60.10   3rd Qu.: 13888152  \n Max.   :77.60   Max.   :182201962  \n                 NA's   :51         \n\nsummary(africa_IM_LE)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plotting",
    "href": "coding-exercise/coding-exercise.html#plotting",
    "title": "R Coding Exercise",
    "section": "Plotting",
    "text": "Plotting\nPlotting Life Expectancy as function of Infant Mortality.\n\nafrica_IM_LE |&gt; # Using pipes again\n  ggplot(aes(x=infant_mortality, y=life_expectancy))+ #Using GGplot for better visualizations\n  geom_point() #geom_point is ggplots method for scatterplots\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nWe can clearly see a negative correlation between our variables of interest, implying as infant mortality increases, life expectancy decreases.\nNext plotting Life Expectancy as a function of Population\n\nafrica_POP_LE |&gt;\n  ggplot(aes(x = population, y =life_expectancy))+\n  geom_point()+\n  scale_x_log10(labels = label_comma()) #Using the scales library to scale the x axis with log10\n\nWarning: Removed 51 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\nWe generally see a positive correlation between these two variables. As in the previous plot we can note several ‘lines’ of data made up of datapoints very close to each other. These represent the data of distinct countries, year after year, increasing or decreasing."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#additional-data-processing",
    "href": "coding-exercise/coding-exercise.html#additional-data-processing",
    "title": "R Coding Exercise",
    "section": "Additional Data Processing",
    "text": "Additional Data Processing\nWe need find a a singular year to explore.\nIn order to do that, we need to identify which years are not missing data for the Infant Mortality variable.\n\n#We start by counting the number of NAs per country, per year\nCountNAs = africadata |&gt;\n  group_by(year) |&gt; # When we group, we need to summarize\n  summarise(sum(is.na(infant_mortality)))#so we use the total number of NA values in this column to group on\n\nCountNAs #Generating table\n\n# A tibble: 57 × 2\n    year `sum(is.na(infant_mortality))`\n   &lt;int&gt;                          &lt;int&gt;\n 1  1960                             10\n 2  1961                             17\n 3  1962                             16\n 4  1963                             16\n 5  1964                             15\n 6  1965                             14\n 7  1966                             13\n 8  1967                             11\n 9  1968                             11\n10  1969                              7\n# ℹ 47 more rows\n\n#Clicking through the table will show when the number of NAs drop to 0 for many years\nplot(CountNAs) # Plotting our findings\n\n\n\n\n\n\n\n\nAs both the table and plot show, around 1981, the number of NAs for the Infant Mortality variable dropped to 0 until 2016, when the number of NAs jumped. So we need to choose a year between that year range.We will choose 2000 for this exercise.\n\n# Creating a new data object\nafrica2000 = africadata |&gt; \n  filter(year == 2000)# We only want rows where the year column is 2000\n\n\n# Checking both the structure and summary of our new data object\n\nstr(africa2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africa2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#additional-plotting",
    "href": "coding-exercise/coding-exercise.html#additional-plotting",
    "title": "R Coding Exercise",
    "section": "Additional Plotting",
    "text": "Additional Plotting\nNow, lets generate the same plots from before, with just data from Africa in the year 2000.\nPlotting Life Expectancy as function of Infant Mortality\n\nafrica2000 |&gt; # Our new data object\n  ggplot(aes(x=infant_mortality, y=life_expectancy))+\n  geom_point()\n\n\n\n\n\n\n\n\nWe still see the same negative correlation as before, albeit less strong.\nNext plotting Life Expectancy as a function of Population\n\nafrica2000 |&gt;\n  ggplot(aes(x = population, y =life_expectancy))+\n  geom_point()+\n  scale_x_log10(labels = label_comma()) #Using Scales again\n\n\n\n\n\n\n\n\nWe do not see a real trend in this plot, which differs from the initial plot with all the data from African."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#modeling",
    "href": "coding-exercise/coding-exercise.html#modeling",
    "title": "R Coding Exercise",
    "section": "Modeling",
    "text": "Modeling\nWe will fit two models using two different predictors (infant mortality and population) to predict life expectancy.\n\nfit1 = lm(life_expectancy ~ infant_mortality, data=africa2000) # Initializing model using infant_mortality as predictor\n\nfit2 =lm(life_expectancy ~ population, data=africa2000)\n#Model using Population as predictor\n\nNow we run summary() to display the results of our two model runs.\n\nsummary(fit1) #Summary will show us all the important info of our two models\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africa2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n\n\nsummary(fit2) \n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africa2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#model-conclusions",
    "href": "coding-exercise/coding-exercise.html#model-conclusions",
    "title": "R Coding Exercise",
    "section": "Model Conclusions",
    "text": "Model Conclusions\nAs expected model 1 (Predictor: Infant Mortality) has a significant effect (p-value is far below .05), and that effect is negative (intercept is -.1891).\nAlso as expected, model 2 (Predictor: Population) did not have a substantial effect (p-value .6 &gt; .05)."
  },
  {
    "objectID": "tidytuesday-exercise/Synthetic Data.html",
    "href": "tidytuesday-exercise/Synthetic Data.html",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "library(tidyr)\nlibrary(here)\n\nhere() starts at C:/Users/Client/Documents/antonioflores-P2-portfolio\n\nlibrary(synthpop) # Primary library needed for creating Synthetic Data\n\nWarning: package 'synthpop' was built under R version 4.3.3\n\n\nFind out more at https://www.synthpop.org.uk/\n\nlibrary(performance) # Using this to test models and compare models\n\nWarning: package 'performance' was built under R version 4.3.3\n\nlibrary(see) #Needed to supplement the above library\n\nWarning: package 'see' was built under R version 4.3.3\n\nlibrary(corrplot) # Used for Correlation Plot\n\ncorrplot 0.92 loaded\n\n\n\n\nI chose a health data set with different bio variables like BMI and Blood Pressure.\n\ndata_location &lt;- here(\"tidytuesday-exercise\",\"Healthcare-Diabetes.csv\")\n\nrawdata &lt;- read.csv(data_location, sep = \",\")\n\n\n\n\nWe want to create some models to test with both data sets. Even thought the synthetic data will have different data than our original dataset, the results from the models should remain close to the same.\n\n#Using BMI as outcome with Glucose, BP, and Age as predictors\nfit1 = lm(BMI ~  Glucose + BloodPressure + Age,\n          data=rawdata)\n\n(results = summary(fit1))\n\n\nCall:\nlm(formula = BMI ~ Glucose + BloodPressure + Age, data = rawdata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.258  -4.830  -0.362   4.587  45.961 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   19.750111   0.741469  26.636  &lt; 2e-16 ***\nGlucose        0.052255   0.004672  11.185  &lt; 2e-16 ***\nBloodPressure  0.113870   0.007745  14.703  &lt; 2e-16 ***\nAge           -0.054728   0.012953  -4.225 2.47e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.58 on 2764 degrees of freedom\nMultiple R-squared:   0.12, Adjusted R-squared:  0.119 \nF-statistic: 125.6 on 3 and 2764 DF,  p-value: &lt; 2.2e-16\n\n\n\nfit2 = lm(BMI ~  Glucose + BloodPressure + Age,\n          data=rawdata)\n\n(summary(fit2))\n\n\nCall:\nlm(formula = BMI ~ Glucose + BloodPressure + Age, data = rawdata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.258  -4.830  -0.362   4.587  45.961 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   19.750111   0.741469  26.636  &lt; 2e-16 ***\nGlucose        0.052255   0.004672  11.185  &lt; 2e-16 ***\nBloodPressure  0.113870   0.007745  14.703  &lt; 2e-16 ***\nAge           -0.054728   0.012953  -4.225 2.47e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.58 on 2764 degrees of freedom\nMultiple R-squared:   0.12, Adjusted R-squared:  0.119 \nF-statistic: 125.6 on 3 and 2764 DF,  p-value: &lt; 2.2e-16\n\n\nDiscovered this incredibly useful took for visually assessing your model.\n\ncheck_model(fit1)\n\n\n\n\n\n\n\n\n\ncheck_model(fit2)\n\n\n\n\n\n\n\n\nBoth of our models look visually solid. Our prediction lines follows the observed data lines, and our residuals roughly fall long the normality line.\n\n\n\n\nrawdata$Outcome = as.factor(rawdata$Outcome)\ncodebook.syn(rawdata)\n\n$tab\n                   variable   class nmiss perctmiss ndistinct\n1                        Id integer     0         0      2768\n2               Pregnancies integer     0         0        17\n3                   Glucose integer     0         0       136\n4             BloodPressure integer     0         0        47\n5             SkinThickness integer     0         0        53\n6                   Insulin integer     0         0       187\n7                       BMI numeric     0         0       253\n8  DiabetesPedigreeFunction numeric     0         0       523\n9                       Age integer     0         0        52\n10                  Outcome  factor     0         0         2\n               details\n1                     \n2                     \n3                     \n4                     \n5                     \n6                     \n7      Range: 0 - 80.6\n8  Range: 0.078 - 2.42\n9                     \n10             '0' '1'\n\n$labs\nNULL\n\n\n\n\n\n\nnew_seed = 21 # Setting our seed at a random value\nsynthetic_data = syn(rawdata, \n                     seed = new_seed) #This will give us our synthetic dataset\n\n\nSynthesis\n-----------\n Id Pregnancies Glucose BloodPressure SkinThickness Insulin BMI DiabetesPedigreeFunction Age Outcome\n\n\n\n#cleaning the synthetic dataset\nsynth_data_clean = sdc(synthetic_data, rawdata, \n                       label = \"FAKE DATA\",\n                       rm.replicated.uniques = TRUE)  #This is important! Sometimes, when we create \"fake\" synthetic data, we happen to recreate an actual observation in the original data set. So, in the name of privacy, we remove those observations.\n\nno. of replicated uniques: 4\n\nwrite.syn(synth_data_clean, \n          filename = \"synthetic_diabetes_data\",\n          filetype = \"csv\") #Outputting our synthetic data\n\nSynthetic data exported as csv file(s).\nInformation on synthetic data written to\n  C:/Users/Client/Documents/antonioflores-P2-portfolio/tidytuesday-exercise/synthesis_info_synthetic_diabetes_data.txt \n\n\n\n\n\n\ncompare(synthetic_data, rawdata, stat = \"counts\")\n\n\nComparing counts observed with synthetic\n\n\n\n\n\n\n\n\n\nPress return for next variable(s): \n\n\n\n\n\n\n\n\n\nPress return for next variable(s): \n\n\n\n\n\n\n\n\n\n\nSelected utility measures:\n                             pMSE   S_pMSE df\nId                       0.000028 0.309741  4\nPregnancies              0.000026 0.283048  4\nGlucose                  0.000021 0.229948  4\nBloodPressure            0.000067 0.738437  4\nSkinThickness            0.000222 3.271697  3\nInsulin                  0.000125 2.757808  2\nBMI                      0.000069 0.761283  4\nDiabetesPedigreeFunction 0.000196 2.174107  4\nAge                      0.000150 1.657246  4\nOutcome                  0.000001 0.039977  1\n\n\nWe can easily see that the synthetic dataset (light blue) closely resembles our original data set (dark blue)\n\n\n\n\nsynth_fit = lm.synds(BMI ~  Glucose + BloodPressure + Age,\n          data=synthetic_data)\n\ncompare(synth_fit, rawdata)\n\n\nCall used to fit models to the data:\nlm.synds(formula = BMI ~ Glucose + BloodPressure + Age, data = synthetic_data)\n\nDifferences between results based on synthetic and observed data:\n                Synthetic    Observed         Diff Std. coef diff CI overlap\n(Intercept)   19.75878326 19.75011087  0.008672388     0.01169623  0.9970162\nGlucose        0.05770880  0.05225509  0.005453708     1.16738806  0.7021914\nBloodPressure  0.08994052  0.11386986 -0.023929344    -3.08970102  0.2117965\nAge           -0.01893494 -0.05472831  0.035793376     2.76322362  0.2950831\n\nMeasures for one synthesis and 4 coefficients\nMean confidence interval overlap:  0.5515218\nMean absolute std. coef diff:  1.758002\n\nMahalanobis distance ratio for lack-of-fit (target 1.0): 4.61\nLack-of-fit test: 18.42926; p-value 0.001 for test that synthesis model is\ncompatible with a chi-squared test with 4 degrees of freedom.\n\nConfidence interval plot:\n\n\n\n\n\n\n\n\n\nThere are some differences between both data sets, but they are not significant. The P-value of this test is above .05 which in this case tells us there is not a substantial difference between the two model’s results. Assessing the visual chart we also see a fairly close similarity.\n\nsynth_fit2 = lm.synds(DiabetesPedigreeFunction ~  SkinThickness + Insulin + Pregnancies,\n          data=synthetic_data)\n\ncompare(synth_fit2, rawdata)\n\n\nCall used to fit models to the data:\nlm.synds(formula = DiabetesPedigreeFunction ~ SkinThickness + \n    Insulin + Pregnancies, data = synthetic_data)\n\nDifferences between results based on synthetic and observed data:\n                  Synthetic      Observed          Diff Std. coef diff\n(Intercept)    0.4199111517  0.3928253745  2.708578e-02      2.1836294\nSkinThickness  0.0022171649  0.0023947366 -1.775717e-04     -0.4220489\nInsulin        0.0004052427  0.0003978994  7.343269e-06      0.1219856\nPregnancies   -0.0038284710 -0.0009043188 -2.924152e-03     -1.6019283\n              CI overlap\n(Intercept)    0.4429415\nSkinThickness  0.8923325\nInsulin        0.9688807\nPregnancies    0.5913373\n\nMeasures for one synthesis and 4 coefficients\nMean confidence interval overlap:  0.723873\nMean absolute std. coef diff:  1.082398\n\nMahalanobis distance ratio for lack-of-fit (target 1.0): 1.84\nLack-of-fit test: 7.346747; p-value 0.1187 for test that synthesis model is\ncompatible with a chi-squared test with 4 degrees of freedom.\n\nConfidence interval plot:\n\n\n\n\n\n\n\n\n\nFairly similar results, but there appears to be more variation than the previous comparison\nNext, we can assess correlation as a whole.\n\nrawdatacor = cor(rawdata[1:9]) # Original dataset correlation between variables\nsynthdatacor = cor(synthetic_data$syn[1:9]) # Synthetic dataset correlation \ncorrplot(rawdatacor)\n\n\n\n\n\n\n\ncorrplot(synthdatacor)\n\n\n\n\n\n\n\n\nWe can see that these two correlation plots are virtual identical, indicating that the associations between variables stayed the same across the new data set.\n\n\n\nOverall, we can conclude that our new synthetic data set maintains the same shape and spread as our original data set while maintaining key associations between variables. If the original data set were a true data from real patients, we have now created an anonymized dataset that can now be used for further analysis."
  },
  {
    "objectID": "tidytuesday-exercise/Synthetic Data.html#reading-in-the-data",
    "href": "tidytuesday-exercise/Synthetic Data.html#reading-in-the-data",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "I chose a health data set with different bio variables like BMI and Blood Pressure.\n\ndata_location &lt;- here(\"tidytuesday-exercise\",\"Healthcare-Diabetes.csv\")\n\nrawdata &lt;- read.csv(data_location, sep = \",\")"
  },
  {
    "objectID": "tidytuesday-exercise/Synthetic Data.html#before-generating-new-data-set",
    "href": "tidytuesday-exercise/Synthetic Data.html#before-generating-new-data-set",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "We want to create some models to test with both data sets. Even thought the synthetic data will have different data than our original dataset, the results from the models should remain close to the same.\n\n#Using BMI as outcome with Glucose, BP, and Age as predictors\nfit1 = lm(BMI ~  Glucose + BloodPressure + Age,\n          data=rawdata)\n\n(results = summary(fit1))\n\n\nCall:\nlm(formula = BMI ~ Glucose + BloodPressure + Age, data = rawdata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.258  -4.830  -0.362   4.587  45.961 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   19.750111   0.741469  26.636  &lt; 2e-16 ***\nGlucose        0.052255   0.004672  11.185  &lt; 2e-16 ***\nBloodPressure  0.113870   0.007745  14.703  &lt; 2e-16 ***\nAge           -0.054728   0.012953  -4.225 2.47e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.58 on 2764 degrees of freedom\nMultiple R-squared:   0.12, Adjusted R-squared:  0.119 \nF-statistic: 125.6 on 3 and 2764 DF,  p-value: &lt; 2.2e-16\n\n\n\nfit2 = lm(BMI ~  Glucose + BloodPressure + Age,\n          data=rawdata)\n\n(summary(fit2))\n\n\nCall:\nlm(formula = BMI ~ Glucose + BloodPressure + Age, data = rawdata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.258  -4.830  -0.362   4.587  45.961 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   19.750111   0.741469  26.636  &lt; 2e-16 ***\nGlucose        0.052255   0.004672  11.185  &lt; 2e-16 ***\nBloodPressure  0.113870   0.007745  14.703  &lt; 2e-16 ***\nAge           -0.054728   0.012953  -4.225 2.47e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.58 on 2764 degrees of freedom\nMultiple R-squared:   0.12, Adjusted R-squared:  0.119 \nF-statistic: 125.6 on 3 and 2764 DF,  p-value: &lt; 2.2e-16\n\n\nDiscovered this incredibly useful took for visually assessing your model.\n\ncheck_model(fit1)\n\n\n\n\n\n\n\n\n\ncheck_model(fit2)\n\n\n\n\n\n\n\n\nBoth of our models look visually solid. Our prediction lines follows the observed data lines, and our residuals roughly fall long the normality line."
  },
  {
    "objectID": "tidytuesday-exercise/Synthetic Data.html#modifying-data-slightly-before-we-generate-new-data-set",
    "href": "tidytuesday-exercise/Synthetic Data.html#modifying-data-slightly-before-we-generate-new-data-set",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "rawdata$Outcome = as.factor(rawdata$Outcome)\ncodebook.syn(rawdata)\n\n$tab\n                   variable   class nmiss perctmiss ndistinct\n1                        Id integer     0         0      2768\n2               Pregnancies integer     0         0        17\n3                   Glucose integer     0         0       136\n4             BloodPressure integer     0         0        47\n5             SkinThickness integer     0         0        53\n6                   Insulin integer     0         0       187\n7                       BMI numeric     0         0       253\n8  DiabetesPedigreeFunction numeric     0         0       523\n9                       Age integer     0         0        52\n10                  Outcome  factor     0         0         2\n               details\n1                     \n2                     \n3                     \n4                     \n5                     \n6                     \n7      Range: 0 - 80.6\n8  Range: 0.078 - 2.42\n9                     \n10             '0' '1'\n\n$labs\nNULL"
  },
  {
    "objectID": "tidytuesday-exercise/Synthetic Data.html#creating-synthetic-data",
    "href": "tidytuesday-exercise/Synthetic Data.html#creating-synthetic-data",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "new_seed = 21 # Setting our seed at a random value\nsynthetic_data = syn(rawdata, \n                     seed = new_seed) #This will give us our synthetic dataset\n\n\nSynthesis\n-----------\n Id Pregnancies Glucose BloodPressure SkinThickness Insulin BMI DiabetesPedigreeFunction Age Outcome\n\n\n\n#cleaning the synthetic dataset\nsynth_data_clean = sdc(synthetic_data, rawdata, \n                       label = \"FAKE DATA\",\n                       rm.replicated.uniques = TRUE)  #This is important! Sometimes, when we create \"fake\" synthetic data, we happen to recreate an actual observation in the original data set. So, in the name of privacy, we remove those observations.\n\nno. of replicated uniques: 4\n\nwrite.syn(synth_data_clean, \n          filename = \"synthetic_diabetes_data\",\n          filetype = \"csv\") #Outputting our synthetic data\n\nSynthetic data exported as csv file(s).\nInformation on synthetic data written to\n  C:/Users/Client/Documents/antonioflores-P2-portfolio/tidytuesday-exercise/synthesis_info_synthetic_diabetes_data.txt"
  },
  {
    "objectID": "tidytuesday-exercise/Synthetic Data.html#comparing-the-data-sets",
    "href": "tidytuesday-exercise/Synthetic Data.html#comparing-the-data-sets",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "compare(synthetic_data, rawdata, stat = \"counts\")\n\n\nComparing counts observed with synthetic\n\n\n\n\n\n\n\n\n\nPress return for next variable(s): \n\n\n\n\n\n\n\n\n\nPress return for next variable(s): \n\n\n\n\n\n\n\n\n\n\nSelected utility measures:\n                             pMSE   S_pMSE df\nId                       0.000028 0.309741  4\nPregnancies              0.000026 0.283048  4\nGlucose                  0.000021 0.229948  4\nBloodPressure            0.000067 0.738437  4\nSkinThickness            0.000222 3.271697  3\nInsulin                  0.000125 2.757808  2\nBMI                      0.000069 0.761283  4\nDiabetesPedigreeFunction 0.000196 2.174107  4\nAge                      0.000150 1.657246  4\nOutcome                  0.000001 0.039977  1\n\n\nWe can easily see that the synthetic dataset (light blue) closely resembles our original data set (dark blue)"
  },
  {
    "objectID": "tidytuesday-exercise/Synthetic Data.html#testing-associations",
    "href": "tidytuesday-exercise/Synthetic Data.html#testing-associations",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "synth_fit = lm.synds(BMI ~  Glucose + BloodPressure + Age,\n          data=synthetic_data)\n\ncompare(synth_fit, rawdata)\n\n\nCall used to fit models to the data:\nlm.synds(formula = BMI ~ Glucose + BloodPressure + Age, data = synthetic_data)\n\nDifferences between results based on synthetic and observed data:\n                Synthetic    Observed         Diff Std. coef diff CI overlap\n(Intercept)   19.75878326 19.75011087  0.008672388     0.01169623  0.9970162\nGlucose        0.05770880  0.05225509  0.005453708     1.16738806  0.7021914\nBloodPressure  0.08994052  0.11386986 -0.023929344    -3.08970102  0.2117965\nAge           -0.01893494 -0.05472831  0.035793376     2.76322362  0.2950831\n\nMeasures for one synthesis and 4 coefficients\nMean confidence interval overlap:  0.5515218\nMean absolute std. coef diff:  1.758002\n\nMahalanobis distance ratio for lack-of-fit (target 1.0): 4.61\nLack-of-fit test: 18.42926; p-value 0.001 for test that synthesis model is\ncompatible with a chi-squared test with 4 degrees of freedom.\n\nConfidence interval plot:\n\n\n\n\n\n\n\n\n\nThere are some differences between both data sets, but they are not significant. The P-value of this test is above .05 which in this case tells us there is not a substantial difference between the two model’s results. Assessing the visual chart we also see a fairly close similarity.\n\nsynth_fit2 = lm.synds(DiabetesPedigreeFunction ~  SkinThickness + Insulin + Pregnancies,\n          data=synthetic_data)\n\ncompare(synth_fit2, rawdata)\n\n\nCall used to fit models to the data:\nlm.synds(formula = DiabetesPedigreeFunction ~ SkinThickness + \n    Insulin + Pregnancies, data = synthetic_data)\n\nDifferences between results based on synthetic and observed data:\n                  Synthetic      Observed          Diff Std. coef diff\n(Intercept)    0.4199111517  0.3928253745  2.708578e-02      2.1836294\nSkinThickness  0.0022171649  0.0023947366 -1.775717e-04     -0.4220489\nInsulin        0.0004052427  0.0003978994  7.343269e-06      0.1219856\nPregnancies   -0.0038284710 -0.0009043188 -2.924152e-03     -1.6019283\n              CI overlap\n(Intercept)    0.4429415\nSkinThickness  0.8923325\nInsulin        0.9688807\nPregnancies    0.5913373\n\nMeasures for one synthesis and 4 coefficients\nMean confidence interval overlap:  0.723873\nMean absolute std. coef diff:  1.082398\n\nMahalanobis distance ratio for lack-of-fit (target 1.0): 1.84\nLack-of-fit test: 7.346747; p-value 0.1187 for test that synthesis model is\ncompatible with a chi-squared test with 4 degrees of freedom.\n\nConfidence interval plot:\n\n\n\n\n\n\n\n\n\nFairly similar results, but there appears to be more variation than the previous comparison\nNext, we can assess correlation as a whole.\n\nrawdatacor = cor(rawdata[1:9]) # Original dataset correlation between variables\nsynthdatacor = cor(synthetic_data$syn[1:9]) # Synthetic dataset correlation \ncorrplot(rawdatacor)\n\n\n\n\n\n\n\ncorrplot(synthdatacor)\n\n\n\n\n\n\n\n\nWe can see that these two correlation plots are virtual identical, indicating that the associations between variables stayed the same across the new data set."
  },
  {
    "objectID": "tidytuesday-exercise/Synthetic Data.html#conclusions",
    "href": "tidytuesday-exercise/Synthetic Data.html#conclusions",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "Overall, we can conclude that our new synthetic data set maintains the same shape and spread as our original data set while maintaining key associations between variables. If the original data set were a true data from real patients, we have now created an anonymized dataset that can now be used for further analysis."
  },
  {
    "objectID": "synthetic-data-exercise/Synthetic_Data.html",
    "href": "synthetic-data-exercise/Synthetic_Data.html",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "library(tidyr)\nlibrary(here)\n\nhere() starts at C:/Users/Client/Documents/antonioflores-P2-portfolio\n\nlibrary(synthpop) # Primary library needed for creating Synthetic Data\n\nWarning: package 'synthpop' was built under R version 4.3.3\n\n\nFind out more at https://www.synthpop.org.uk/\n\nlibrary(performance) # Using this to test models and compare models\n\nWarning: package 'performance' was built under R version 4.3.3\n\nlibrary(see) #Needed to supplement the above library\n\nWarning: package 'see' was built under R version 4.3.3\n\nlibrary(corrplot) # Used for Correlation Plot\n\ncorrplot 0.92 loaded\n\n\n\n\nI chose a health data set with different bio variables like BMI and Blood Pressure.\n\ndata_location &lt;- here(\"synthetic-data-exercise\",\"Healthcare-Diabetes.csv\")\n\nrawdata &lt;- read.csv(data_location, sep = \",\")\n\n\n\n\nWe want to create some models to test with both data sets. Even thought the synthetic data will have different data than our original dataset, the results from the models should remain close to the same.\n\n#Using BMI as outcome with Glucose, BP, and Age as predictors\nfit1 = lm(BMI ~  Glucose + BloodPressure + Age,\n          data=rawdata)\n\n(results = summary(fit1))\n\n\nCall:\nlm(formula = BMI ~ Glucose + BloodPressure + Age, data = rawdata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.258  -4.830  -0.362   4.587  45.961 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   19.750111   0.741469  26.636  &lt; 2e-16 ***\nGlucose        0.052255   0.004672  11.185  &lt; 2e-16 ***\nBloodPressure  0.113870   0.007745  14.703  &lt; 2e-16 ***\nAge           -0.054728   0.012953  -4.225 2.47e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.58 on 2764 degrees of freedom\nMultiple R-squared:   0.12, Adjusted R-squared:  0.119 \nF-statistic: 125.6 on 3 and 2764 DF,  p-value: &lt; 2.2e-16\n\n\n\nfit2 = lm(BMI ~  Glucose + BloodPressure + Age,\n          data=rawdata)\n\n(summary(fit2))\n\n\nCall:\nlm(formula = BMI ~ Glucose + BloodPressure + Age, data = rawdata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.258  -4.830  -0.362   4.587  45.961 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   19.750111   0.741469  26.636  &lt; 2e-16 ***\nGlucose        0.052255   0.004672  11.185  &lt; 2e-16 ***\nBloodPressure  0.113870   0.007745  14.703  &lt; 2e-16 ***\nAge           -0.054728   0.012953  -4.225 2.47e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.58 on 2764 degrees of freedom\nMultiple R-squared:   0.12, Adjusted R-squared:  0.119 \nF-statistic: 125.6 on 3 and 2764 DF,  p-value: &lt; 2.2e-16\n\n\nDiscovered this incredibly useful took for visually assessing your model.\n\ncheck_model(fit1)\n\n\n\n\n\n\n\n\n\ncheck_model(fit2)\n\n\n\n\n\n\n\n\nBoth of our models look visually solid. Our prediction lines follows the observed data lines, and our residuals roughly fall long the normality line.\n\n\n\n\nrawdata$Outcome = as.factor(rawdata$Outcome)\ncodebook.syn(rawdata)\n\n$tab\n                   variable   class nmiss perctmiss ndistinct\n1                        Id integer     0         0      2768\n2               Pregnancies integer     0         0        17\n3                   Glucose integer     0         0       136\n4             BloodPressure integer     0         0        47\n5             SkinThickness integer     0         0        53\n6                   Insulin integer     0         0       187\n7                       BMI numeric     0         0       253\n8  DiabetesPedigreeFunction numeric     0         0       523\n9                       Age integer     0         0        52\n10                  Outcome  factor     0         0         2\n               details\n1                     \n2                     \n3                     \n4                     \n5                     \n6                     \n7      Range: 0 - 80.6\n8  Range: 0.078 - 2.42\n9                     \n10             '0' '1'\n\n$labs\nNULL\n\n\n\n\n\n\nnew_seed = 21 # Setting our seed at a random value\nsynthetic_data = syn(rawdata, \n                     seed = new_seed) #This will give us our synthetic dataset\n\n\nSynthesis\n-----------\n Id Pregnancies Glucose BloodPressure SkinThickness Insulin BMI DiabetesPedigreeFunction Age Outcome\n\n\n\n#cleaning the synthetic dataset\nsynth_data_clean = sdc(synthetic_data, rawdata, \n                       label = \"FAKE DATA\",\n                       rm.replicated.uniques = TRUE)  #This is important! Sometimes, when we create \"fake\" synthetic data, we happen to recreate an actual observation in the original data set. So, in the name of privacy, we remove those observations.\n\nno. of replicated uniques: 4\n\nwrite.syn(synth_data_clean, \n          filename = \"synthetic_diabetes_data\",\n          filetype = \"csv\") #Outputting our synthetic data\n\nSynthetic data exported as csv file(s).\nInformation on synthetic data written to\n  C:/Users/Client/Documents/antonioflores-P2-portfolio/synthetic-data-exercise/synthesis_info_synthetic_diabetes_data.txt \n\n\n\n\n\n\ncompare(synthetic_data, rawdata, stat = \"counts\")\n\n\nComparing counts observed with synthetic\n\n\n\n\n\n\n\n\n\nPress return for next variable(s): \n\n\n\n\n\n\n\n\n\nPress return for next variable(s): \n\n\n\n\n\n\n\n\n\n\nSelected utility measures:\n                             pMSE   S_pMSE df\nId                       0.000028 0.309741  4\nPregnancies              0.000026 0.283048  4\nGlucose                  0.000021 0.229948  4\nBloodPressure            0.000067 0.738437  4\nSkinThickness            0.000222 3.271697  3\nInsulin                  0.000125 2.757808  2\nBMI                      0.000069 0.761283  4\nDiabetesPedigreeFunction 0.000196 2.174107  4\nAge                      0.000150 1.657246  4\nOutcome                  0.000001 0.039977  1\n\n\nWe can easily see that the synthetic dataset (light blue) closely resembles our original data set (dark blue)\n\n\n\n\nsynth_fit = lm.synds(BMI ~  Glucose + BloodPressure + Age,\n          data=synthetic_data)\n\ncompare(synth_fit, rawdata)\n\n\nCall used to fit models to the data:\nlm.synds(formula = BMI ~ Glucose + BloodPressure + Age, data = synthetic_data)\n\nDifferences between results based on synthetic and observed data:\n                Synthetic    Observed         Diff Std. coef diff CI overlap\n(Intercept)   19.75878326 19.75011087  0.008672388     0.01169623  0.9970162\nGlucose        0.05770880  0.05225509  0.005453708     1.16738806  0.7021914\nBloodPressure  0.08994052  0.11386986 -0.023929344    -3.08970102  0.2117965\nAge           -0.01893494 -0.05472831  0.035793376     2.76322362  0.2950831\n\nMeasures for one synthesis and 4 coefficients\nMean confidence interval overlap:  0.5515218\nMean absolute std. coef diff:  1.758002\n\nMahalanobis distance ratio for lack-of-fit (target 1.0): 4.61\nLack-of-fit test: 18.42926; p-value 0.001 for test that synthesis model is\ncompatible with a chi-squared test with 4 degrees of freedom.\n\nConfidence interval plot:\n\n\n\n\n\n\n\n\n\nThere are some differences between both data sets, but they are not significant. The P-value of this test is above .05 which in this case tells us there is not a substantial difference between the two model’s results. Assessing the visual chart we also see a fairly close similarity.\n\nsynth_fit2 = lm.synds(DiabetesPedigreeFunction ~  SkinThickness + Insulin + Pregnancies,\n          data=synthetic_data)\n\ncompare(synth_fit2, rawdata)\n\n\nCall used to fit models to the data:\nlm.synds(formula = DiabetesPedigreeFunction ~ SkinThickness + \n    Insulin + Pregnancies, data = synthetic_data)\n\nDifferences between results based on synthetic and observed data:\n                  Synthetic      Observed          Diff Std. coef diff\n(Intercept)    0.4199111517  0.3928253745  2.708578e-02      2.1836294\nSkinThickness  0.0022171649  0.0023947366 -1.775717e-04     -0.4220489\nInsulin        0.0004052427  0.0003978994  7.343269e-06      0.1219856\nPregnancies   -0.0038284710 -0.0009043188 -2.924152e-03     -1.6019283\n              CI overlap\n(Intercept)    0.4429415\nSkinThickness  0.8923325\nInsulin        0.9688807\nPregnancies    0.5913373\n\nMeasures for one synthesis and 4 coefficients\nMean confidence interval overlap:  0.723873\nMean absolute std. coef diff:  1.082398\n\nMahalanobis distance ratio for lack-of-fit (target 1.0): 1.84\nLack-of-fit test: 7.346747; p-value 0.1187 for test that synthesis model is\ncompatible with a chi-squared test with 4 degrees of freedom.\n\nConfidence interval plot:\n\n\n\n\n\n\n\n\n\nFairly similar results, but there appears to be more variation than the previous comparison\nNext, we can assess correlation as a whole.\n\nrawdatacor = cor(rawdata[1:9]) # Original dataset correlation between variables\nsynthdatacor = cor(synthetic_data$syn[1:9]) # Synthetic dataset correlation \ncorrplot(rawdatacor)\n\n\n\n\n\n\n\ncorrplot(synthdatacor)\n\n\n\n\n\n\n\n\nWe can see that these two correlation plots are virtual identical, indicating that the associations between variables stayed the same across the new data set.\n\n\n\nOverall, we can conclude that our new synthetic data set maintains the same shape and spread as our original data set while maintaining key associations between variables. If the original data set were a true data from real patients, we have now created an anonymized dataset that can now be used for further analysis."
  },
  {
    "objectID": "synthetic-data-exercise/Synthetic_Data.html#reading-in-the-data",
    "href": "synthetic-data-exercise/Synthetic_Data.html#reading-in-the-data",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "I chose a health data set with different bio variables like BMI and Blood Pressure.\n\ndata_location &lt;- here(\"synthetic-data-exercise\",\"Healthcare-Diabetes.csv\")\n\nrawdata &lt;- read.csv(data_location, sep = \",\")"
  },
  {
    "objectID": "synthetic-data-exercise/Synthetic_Data.html#before-generating-new-data-set",
    "href": "synthetic-data-exercise/Synthetic_Data.html#before-generating-new-data-set",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "We want to create some models to test with both data sets. Even thought the synthetic data will have different data than our original dataset, the results from the models should remain close to the same.\n\n#Using BMI as outcome with Glucose, BP, and Age as predictors\nfit1 = lm(BMI ~  Glucose + BloodPressure + Age,\n          data=rawdata)\n\n(results = summary(fit1))\n\n\nCall:\nlm(formula = BMI ~ Glucose + BloodPressure + Age, data = rawdata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.258  -4.830  -0.362   4.587  45.961 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   19.750111   0.741469  26.636  &lt; 2e-16 ***\nGlucose        0.052255   0.004672  11.185  &lt; 2e-16 ***\nBloodPressure  0.113870   0.007745  14.703  &lt; 2e-16 ***\nAge           -0.054728   0.012953  -4.225 2.47e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.58 on 2764 degrees of freedom\nMultiple R-squared:   0.12, Adjusted R-squared:  0.119 \nF-statistic: 125.6 on 3 and 2764 DF,  p-value: &lt; 2.2e-16\n\n\n\nfit2 = lm(BMI ~  Glucose + BloodPressure + Age,\n          data=rawdata)\n\n(summary(fit2))\n\n\nCall:\nlm(formula = BMI ~ Glucose + BloodPressure + Age, data = rawdata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.258  -4.830  -0.362   4.587  45.961 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   19.750111   0.741469  26.636  &lt; 2e-16 ***\nGlucose        0.052255   0.004672  11.185  &lt; 2e-16 ***\nBloodPressure  0.113870   0.007745  14.703  &lt; 2e-16 ***\nAge           -0.054728   0.012953  -4.225 2.47e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.58 on 2764 degrees of freedom\nMultiple R-squared:   0.12, Adjusted R-squared:  0.119 \nF-statistic: 125.6 on 3 and 2764 DF,  p-value: &lt; 2.2e-16\n\n\nDiscovered this incredibly useful took for visually assessing your model.\n\ncheck_model(fit1)\n\n\n\n\n\n\n\n\n\ncheck_model(fit2)\n\n\n\n\n\n\n\n\nBoth of our models look visually solid. Our prediction lines follows the observed data lines, and our residuals roughly fall long the normality line."
  },
  {
    "objectID": "synthetic-data-exercise/Synthetic_Data.html#modifying-data-slightly-before-we-generate-new-data-set",
    "href": "synthetic-data-exercise/Synthetic_Data.html#modifying-data-slightly-before-we-generate-new-data-set",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "rawdata$Outcome = as.factor(rawdata$Outcome)\ncodebook.syn(rawdata)\n\n$tab\n                   variable   class nmiss perctmiss ndistinct\n1                        Id integer     0         0      2768\n2               Pregnancies integer     0         0        17\n3                   Glucose integer     0         0       136\n4             BloodPressure integer     0         0        47\n5             SkinThickness integer     0         0        53\n6                   Insulin integer     0         0       187\n7                       BMI numeric     0         0       253\n8  DiabetesPedigreeFunction numeric     0         0       523\n9                       Age integer     0         0        52\n10                  Outcome  factor     0         0         2\n               details\n1                     \n2                     \n3                     \n4                     \n5                     \n6                     \n7      Range: 0 - 80.6\n8  Range: 0.078 - 2.42\n9                     \n10             '0' '1'\n\n$labs\nNULL"
  },
  {
    "objectID": "synthetic-data-exercise/Synthetic_Data.html#creating-synthetic-data",
    "href": "synthetic-data-exercise/Synthetic_Data.html#creating-synthetic-data",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "new_seed = 21 # Setting our seed at a random value\nsynthetic_data = syn(rawdata, \n                     seed = new_seed) #This will give us our synthetic dataset\n\n\nSynthesis\n-----------\n Id Pregnancies Glucose BloodPressure SkinThickness Insulin BMI DiabetesPedigreeFunction Age Outcome\n\n\n\n#cleaning the synthetic dataset\nsynth_data_clean = sdc(synthetic_data, rawdata, \n                       label = \"FAKE DATA\",\n                       rm.replicated.uniques = TRUE)  #This is important! Sometimes, when we create \"fake\" synthetic data, we happen to recreate an actual observation in the original data set. So, in the name of privacy, we remove those observations.\n\nno. of replicated uniques: 4\n\nwrite.syn(synth_data_clean, \n          filename = \"synthetic_diabetes_data\",\n          filetype = \"csv\") #Outputting our synthetic data\n\nSynthetic data exported as csv file(s).\nInformation on synthetic data written to\n  C:/Users/Client/Documents/antonioflores-P2-portfolio/synthetic-data-exercise/synthesis_info_synthetic_diabetes_data.txt"
  },
  {
    "objectID": "synthetic-data-exercise/Synthetic_Data.html#comparing-the-data-sets",
    "href": "synthetic-data-exercise/Synthetic_Data.html#comparing-the-data-sets",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "compare(synthetic_data, rawdata, stat = \"counts\")\n\n\nComparing counts observed with synthetic\n\n\n\n\n\n\n\n\n\nPress return for next variable(s): \n\n\n\n\n\n\n\n\n\nPress return for next variable(s): \n\n\n\n\n\n\n\n\n\n\nSelected utility measures:\n                             pMSE   S_pMSE df\nId                       0.000028 0.309741  4\nPregnancies              0.000026 0.283048  4\nGlucose                  0.000021 0.229948  4\nBloodPressure            0.000067 0.738437  4\nSkinThickness            0.000222 3.271697  3\nInsulin                  0.000125 2.757808  2\nBMI                      0.000069 0.761283  4\nDiabetesPedigreeFunction 0.000196 2.174107  4\nAge                      0.000150 1.657246  4\nOutcome                  0.000001 0.039977  1\n\n\nWe can easily see that the synthetic dataset (light blue) closely resembles our original data set (dark blue)"
  },
  {
    "objectID": "synthetic-data-exercise/Synthetic_Data.html#testing-associations",
    "href": "synthetic-data-exercise/Synthetic_Data.html#testing-associations",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "synth_fit = lm.synds(BMI ~  Glucose + BloodPressure + Age,\n          data=synthetic_data)\n\ncompare(synth_fit, rawdata)\n\n\nCall used to fit models to the data:\nlm.synds(formula = BMI ~ Glucose + BloodPressure + Age, data = synthetic_data)\n\nDifferences between results based on synthetic and observed data:\n                Synthetic    Observed         Diff Std. coef diff CI overlap\n(Intercept)   19.75878326 19.75011087  0.008672388     0.01169623  0.9970162\nGlucose        0.05770880  0.05225509  0.005453708     1.16738806  0.7021914\nBloodPressure  0.08994052  0.11386986 -0.023929344    -3.08970102  0.2117965\nAge           -0.01893494 -0.05472831  0.035793376     2.76322362  0.2950831\n\nMeasures for one synthesis and 4 coefficients\nMean confidence interval overlap:  0.5515218\nMean absolute std. coef diff:  1.758002\n\nMahalanobis distance ratio for lack-of-fit (target 1.0): 4.61\nLack-of-fit test: 18.42926; p-value 0.001 for test that synthesis model is\ncompatible with a chi-squared test with 4 degrees of freedom.\n\nConfidence interval plot:\n\n\n\n\n\n\n\n\n\nThere are some differences between both data sets, but they are not significant. The P-value of this test is above .05 which in this case tells us there is not a substantial difference between the two model’s results. Assessing the visual chart we also see a fairly close similarity.\n\nsynth_fit2 = lm.synds(DiabetesPedigreeFunction ~  SkinThickness + Insulin + Pregnancies,\n          data=synthetic_data)\n\ncompare(synth_fit2, rawdata)\n\n\nCall used to fit models to the data:\nlm.synds(formula = DiabetesPedigreeFunction ~ SkinThickness + \n    Insulin + Pregnancies, data = synthetic_data)\n\nDifferences between results based on synthetic and observed data:\n                  Synthetic      Observed          Diff Std. coef diff\n(Intercept)    0.4199111517  0.3928253745  2.708578e-02      2.1836294\nSkinThickness  0.0022171649  0.0023947366 -1.775717e-04     -0.4220489\nInsulin        0.0004052427  0.0003978994  7.343269e-06      0.1219856\nPregnancies   -0.0038284710 -0.0009043188 -2.924152e-03     -1.6019283\n              CI overlap\n(Intercept)    0.4429415\nSkinThickness  0.8923325\nInsulin        0.9688807\nPregnancies    0.5913373\n\nMeasures for one synthesis and 4 coefficients\nMean confidence interval overlap:  0.723873\nMean absolute std. coef diff:  1.082398\n\nMahalanobis distance ratio for lack-of-fit (target 1.0): 1.84\nLack-of-fit test: 7.346747; p-value 0.1187 for test that synthesis model is\ncompatible with a chi-squared test with 4 degrees of freedom.\n\nConfidence interval plot:\n\n\n\n\n\n\n\n\n\nFairly similar results, but there appears to be more variation than the previous comparison\nNext, we can assess correlation as a whole.\n\nrawdatacor = cor(rawdata[1:9]) # Original dataset correlation between variables\nsynthdatacor = cor(synthetic_data$syn[1:9]) # Synthetic dataset correlation \ncorrplot(rawdatacor)\n\n\n\n\n\n\n\ncorrplot(synthdatacor)\n\n\n\n\n\n\n\n\nWe can see that these two correlation plots are virtual identical, indicating that the associations between variables stayed the same across the new data set."
  },
  {
    "objectID": "synthetic-data-exercise/Synthetic_Data.html#conclusions",
    "href": "synthetic-data-exercise/Synthetic_Data.html#conclusions",
    "title": "Synthetic Data Project",
    "section": "",
    "text": "Overall, we can conclude that our new synthetic data set maintains the same shape and spread as our original data set while maintaining key associations between variables. If the original data set were a true data from real patients, we have now created an anonymized dataset that can now be used for further analysis."
  }
]